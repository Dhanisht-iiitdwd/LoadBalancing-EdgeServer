# -*- coding: utf-8 -*-
"""edge4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1odBdm635mee_tEXiVFb3eZgWvahadofg
"""

import heapq
import time 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random

edges = []                        #edge servers 
iots=[]                           #iots devices
for i in range(0,4):             
    edges.append("edge" + str(i))                 
    
    
for i in range(0,20):
    iots.append("iot" + str(i+4))
    
print("iots: ",iots)
print("edges: ",edges)

### INPUTS###

avg_pkt_size=8000       #packet size in bits
max_thres=85000*avg_pkt_size # bits 85000*8000 =680000000 bits
                             #maximum load that one edge can take is "max_thres"




frequency=2.4*10**9    # standard frequency of AODV protocol
datarate= 54*10**6     # standard datarate at which data can be transmitted,
                       #unit of datarate bits/sec
# Different Variables , list , dictionary are initialized here                       
extraload = {"edge1" : [], "edge2" : [],"edge3" : [],"edge4" : []}  #extraload on edges, 
                                                                    #exceeding, maximum threshold  
edgelist = ["edge1","edge2","edge3","edge4"]     
remaining_capacity_ofedges = {}                  #remaining space
t0 = 0 # starting time   

print("\n")

class edge4:
  print("edge 4")
  tjoin_edge4 = [28,30,37,44,46]   #joining times of nodes to edge4 
  tsend_edge4 = []                 #time to send  to edge4 from nodes


  for i in range(0,5):
    
    tsend_edge4.append(int(random.randint(1,300*10**6)/datarate))
    
    

  print("time taken to send/receive data to edge4: ",tsend_edge4)    

  tfinal_edge4 = []                           #final time when tcp connection stops
  for i in range(0,5):
    tfinal_edge4.append(tsend_edge4[i] + tjoin_edge4[i])
    
  load_edge4 = []                      #load due to each node on edge4

  print("final time of iots which are connected to edge4: ",tfinal_edge4)

  for i in range(0,5):
    load_edge4.append(int(datarate*(tfinal_edge4[i]-tjoin_edge4[i])))

  print("iots to connect to edge4: ",load_edge4)
               #workload on edge4     


    

  total_load_edge4 = 0            #summation of all loads contributed by all iots connected to edge1
  for i in range(0,5):
    if(total_load_edge4 < max_thres and load_edge4[i] <= (max_thres - total_load_edge4)):
      total_load_edge4 += load_edge4[i]
      
    else:
        print("load exceeded on edge , try connceting to some other edge")
        extraload["edge4"].append(load_edge4[i])               
        
    

  print("extraload ",extraload)
  edgeload = total_load_edge4
  print(edgeload)    
    
  print("total load of iots which are connected to edge4: ",total_load_edge4)    
  print("maximum threshold of edge4: ",max_thres)
  load4 = max_thres - total_load_edge4
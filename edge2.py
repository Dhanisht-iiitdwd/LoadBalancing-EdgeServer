# -*- coding: utf-8 -*-
"""edge2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IzsoJLBITCWuNDvikKlOa-eBBvFGG7-o
"""

import heapq
import time 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random

edges = []                        #edge servers 
iots=[]                           #iots devices
for i in range(0,4):             
    edges.append("edge" + str(i))                 
    
    
for i in range(0,20):
    iots.append("iot" + str(i+4))
    
print("iots: ",iots)
print("edges: ",edges)

### INPUTS###

avg_pkt_size=8000       #packet size in bits
max_thres=85000*avg_pkt_size # bits 85000*8000 =680000000 bits
                             #maximum load that one edge can take is "max_thres"




frequency=2.4*10**9    # standard frequency of AODV protocol
datarate= 54*10**6     # standard datarate at which data can be transmitted,
                       #unit of datarate bits/sec
# Different Variables , list , dictionary are initialized here                       
extraload = {"edge1" : [], "edge2" : [],"edge3" : [],"edge4" : []}  #extraload on edges, 
                                                                    #exceeding, maximum threshold  
edgelist = ["edge1","edge2","edge3","edge4"]     
remaining_capacity_ofedges = {}                  #remaining space
t0 = 0 # starting time   

print("\n")
 

class edge2:
  tjoin_edge2 = [25,32,37,48,54]   #joining times of nodes to edge1 
  tsend_edge2 = []               #time to send  to edge1 from nodes/iots


  for i in range(0,5):
    
    tsend_edge2.append(random.randint(1,300*10**6)/datarate)   #taking randomly generated file size according AODV protocols
    
    

  print("time taken to send/receive data to edge2: ",tsend_edge2)    
    

  tfinal_edge2 = []                           #final time when tcp connection stops
  for i in range(0,5):
    tfinal_edge2.append(tsend_edge2[i] + tjoin_edge2[i])
    
  load_edge2 = []                      #load due to each node on edge2

  print("final time of iots which are connected to edge2: ",tfinal_edge2)

  for i in range(0,5):
    load_edge2.append(int(datarate*(tfinal_edge2[i]-tjoin_edge2[i])))

  print("iots to connect to edge2: ",load_edge2)
                    
  total_load_edge2 = 0            #summation of all loads contributed by all nodes connected to edge2
  for i in range(0,5):
    if(total_load_edge2 < max_thres and load_edge2[i] <= (max_thres - total_load_edge2)):
      total_load_edge2 += load_edge2[i]
      
    else:
        print("load exceeded at edge2, connecting to some other edge")
        extraload["edge2"].append(load_edge2[i]) 
        

  print("extraload ",extraload)
  edgeload = total_load_edge2
   
    
  print("total load on edge2",total_load_edge2)    
  print("maximum threshold of edge2: ",max_thres)